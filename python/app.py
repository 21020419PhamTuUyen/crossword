from flask import Flask, request, jsonify
from flask_cors import CORS  # Th√™m CORS
import stage_generate

app = Flask(__name__)

# K√≠ch ho·∫°t CORS ƒë·ªÉ frontend c√≥ th·ªÉ g·ªçi API m√† kh√¥ng b·ªã ch·∫∑n
CORS(app, resources={r"/generate-crossword": {"origins": "*"}})

@app.route('/generate-crossword', methods=['POST'])
def generate_crossword():
    data = request.json
    print("üì© Nh·∫≠n request:", data)  # Ghi log request ƒë·ªÉ debug

    # Ki·ªÉm tra gi√° tr·ªã b·∫Øt bu·ªôc
    if "stage" not in data or "grid" not in data:
        return jsonify({"error": "S·ªë ·∫£i v√† k√≠ch th∆∞·ªõc l√† b·∫Øt bu·ªôc!"}), 400

    # L·∫•y gi√° tr·ªã t·ª´ request
    stage = int(data["stage"])
    grid = int(data["grid"])
    topic = data.get("topic")  # N·∫øu kh√¥ng c√≥ th√¨ m·∫∑c ƒë·ªãnh l√† "c√°c lo√†i hoa"
    isChallenge = bool(data.get("isChallenge", False))  # Chuy·ªÉn v·ªÅ ki·ªÉu bool

    if not topic or topic.strip() == "":
        topic = None

    # G·ªçi h√†m t·∫°o √¥ ch·ªØ t·ª´ module stage_generate
    try:
        if(isChallenge):
            result = stage_generate.create_challenge_stage(topic=topic)
        else:
            result = stage_generate.create_crossword_level(stage=stage, grid=grid, topic=topic, isChallenge=isChallenge)
    except Exception as e:
        print("üö® L·ªói khi t·∫°o √¥ ch·ªØ:", e)
        return jsonify({"error": "L·ªói khi t·∫°o √¥ ch·ªØ"}), 500

    print("‚úÖ Tr·∫£ v·ªÅ:", result)  # Log d·ªØ li·ªáu tr·∫£ v·ªÅ ƒë·ªÉ ki·ªÉm tra
    return jsonify({"message": "Crossword created successfully", "result": result})


if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=5000)  # Cho ph√©p ch·∫°y tr√™n m·ªçi ƒë·ªãa ch·ªâ IP
